
public  class LinkedCart<T> implements ShoppingCartInterface<T> {
	
	private Node firstNode;
	private int numberOfEntries;
	
	public LinkedCart()
	{
		firstNode = null;
		numberOfEntries = 0;
	}//end default Constructor
	
	private class Node
	{
		private T data;
		private Node next;
		
		private Node(T dataPortion)
		{
			this(dataPortion, null);
		}//end constructor
		
		
		private Node(T dataPortion, Node nextNode)
		{
			data = dataPortion;
			next = nextNode;
		}//end constructor
	}//end node

	@Override
	public int getCurrentSize() {
		return 0;
	}

	@Override
	public boolean isEmpty() {
		return false;
	}

	@Override
	public boolean add(T newEntry) {
		return false;
	}

	@Override
	public T remove() {
		T result = null;
		if(firstNode != null)
		{
			result = firstNode.data;
			firstNode = firstNode.next;
			numberOfEntries--;
		}//end if
		
		return result;
	}//end remove

	@Override
	public boolean remove(T anEntry) {
		return false;
	}

	@Override
	public void clear() {
		while(!isEmpty())
			remove();
	}//end clear

	@Override
	public int getFrequencyOf(T anEntry) {
		int frequency = 0;
		int loopCounter = 0;
		Node currentNode = firstNode;
		
		while ((loopCounter<numberOfEntries)&&(currentNode != null))
		{
			if(anEntry.equals(currentNode.data))
			{
				frequency++;
			}//end if
			
			loopCounter++;
			currentNode = currentNode.next;
		}//end while
		
		return frequency;
	}//end getFrequencyOf

	@Override
	public boolean contains(T anEntry) {
		boolean found = false;
		Node currentNode = firstNode;
		
		while(!found && (currentNode !=null))
		{
			if(anEntry.equals(currentNode.data))
				found = true;
			else
			currentNode = currentNode.next;
		}//end while
		return found;
	}

	@Override
	public T[] toArray() {
		@SuppressWarnings("unchecked")
		T[]result = (T[])new Object[numberOfEntries];
		
		int index = 0;
		Node currentNode = firstNode;
		while ((index < numberOfEntries) &&(currentNode != null))
		{
			result[index]=currentNode.data;
			index++;
			currentNode = currentNode.next;
		}//end while
		
		return result;
	}
	
	@SuppressWarnings("unused")
	private Node getReferenceTo(T anEntry) {
		boolean found = false;
		Node currentNode = firstNode;
		
		while(!found && (currentNode !=null))
		{
			if(anEntry.equals(currentNode.data))
				found = true;
			else
				currentNode = currentNode.next;
		}//end while
		
		return currentNode;
		}//end getReferenceTo
	
		
	}//end LinkedBag
